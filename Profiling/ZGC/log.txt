[0.012s][info][gc] Using The Z Garbage Collector
[0.144s][info][gc] GC(0) Garbage Collection (Warmup) 4M(11%)->4M(11%)
[5.748s][info][gc] GC(1) Garbage Collection (Warmup) 8M(22%)->6M(17%)
[5.862s][info][gc] GC(2) Garbage Collection (Warmup) 16M(44%)->10M(28%)
[6.164s][info][gc] GC(3) Garbage Collection (Allocation Rate) 18M(50%)->10M(28%)
[20.264s][info][gc] GC(4) Garbage Collection (Proactive) 14M(39%)->10M(28%)
[41.357s][info][gc] GC(5) Garbage Collection (Proactive) 14M(39%)->10M(28%)
[65.555s][info][gc] GC(6) Garbage Collection (Proactive) 14M(39%)->6M(17%)
[76.657s][info][gc] GC(7) Garbage Collection (Proactive) 10M(28%)->6M(17%)
[87.765s][info][gc] GC(8) Garbage Collection (Proactive) 10M(28%)->6M(17%)
[96.779s][info][gc] GC(9) Garbage Collection (Proactive) 10M(28%)->6M(17%)
[107.858s][info][gc] GC(10) Garbage Collection (Proactive) 10M(28%)->6M(17%)
[113.549s][info][gc] GC(11) Garbage Collection (Proactive) 10M(28%)->8M(22%)
[125.855s][info][gc] GC(12) Garbage Collection (Proactive) 12M(33%)->8M(22%)
[136.870s][info][gc] GC(13) Garbage Collection (Proactive) 12M(33%)->8M(22%)
[149.874s][info][gc] GC(14) Garbage Collection (Proactive) 12M(33%)->8M(22%)
[152.460s][info][gc] GC(15) Garbage Collection (Proactive) 18M(50%)->18M(50%)
[152.561s][info][gc] GC(16) Garbage Collection (Allocation Rate) 36M(100%)->8M(22%)
[152.669s][info][gc] GC(17) Garbage Collection (Allocation Rate) 8M(22%)->8M(22%)
[152.754s][info][gc] GC(18) Garbage Collection (Allocation Rate) 8M(22%)->8M(22%)
[152.852s][info][gc] GC(19) Garbage Collection (Allocation Rate) 10M(28%)->8M(22%)
[152.958s][info][gc] GC(20) Garbage Collection (Allocation Rate) 10M(28%)->8M(22%)
[165.858s][info][gc] GC(21) Garbage Collection (Proactive) 12M(33%)->10M(28%)
[192.949s][info][gc] GC(22) Garbage Collection (Proactive) 14M(39%)->8M(22%)
[205.948s][info][gc] GC(23) Garbage Collection (Proactive) 12M(33%)->8M(22%)
[218.957s][info][gc] GC(24) Garbage Collection (Proactive) 12M(33%)->8M(22%)
[219.855s][info][gc] GC(25) Garbage Collection (Proactive) 12M(33%)->10M(28%)
[229.960s][info][gc] GC(26) Garbage Collection (Proactive) 14M(39%)->10M(28%)
[254.961s][info][gc] GC(27) Garbage Collection (Proactive) 14M(39%)->10M(28%)
[281.964s][info][gc] GC(28) Garbage Collection (Proactive) 14M(39%)->10M(28%)
[295.757s][info][gc] GC(29) Garbage Collection (Proactive) 14M(39%)->10M(28%)
[306.146s][info][gc] GC(30) Garbage Collection (Proactive) 14M(39%)->10M(28%)
[319.052s][info][gc] GC(31) Garbage Collection (Proactive) 14M(39%)->10M(28%)
[332.055s][info][gc] GC(32) Garbage Collection (Proactive) 14M(39%)->10M(28%)
[345.050s][info][gc] GC(33) Garbage Collection (Proactive) 14M(39%)->12M(33%)
[368.146s][info][gc] GC(34) Garbage Collection (Proactive) 16M(44%)->10M(28%)
[380.159s][info][gc] GC(35) Garbage Collection (Proactive) 14M(39%)->10M(28%)
[389.167s][info][gc] GC(36) Garbage Collection (Proactive) 14M(39%)->8M(22%)
[401.161s][info][gc] GC(37) Garbage Collection (Proactive) 12M(33%)->8M(22%)
[414.148s][info][gc] GC(38) Garbage Collection (Proactive) 12M(33%)->8M(22%)
[426.145s][info][gc] GC(39) Garbage Collection (Proactive) 12M(33%)->8M(22%)

После создания массива 12:33:49, объем кучи увеличился до 10485760 B,
Во время сортировки слиянием(время на графике) было падение до 8388608 B, далее рост до предыдущего уровня.
Во время сортировки вставками(время на графике) был скачок до 12592912 B, и далее кратковременный до 14680064
Во время сортировки пузырьком(время на графике) был  скачок до 14680064 B
По графику cpu видно, что сортировка пузырьком требует больше ресурсов cpu, а объема heap, у всех примерно одинаково(~2000000B)
